
Перем Параметры;  

//=================================================
Function PrepareString(Стр)   
	
	//Стр = СтрЗаменить(Стр,"\",				" ");			// x5c
	//Стр = СтрЗаменить(Стр,"/",				" ");			// x2f
	//Стр = СтрЗаменить(Стр,Символ(008),		"\b"),			// x08
	Стр = СтрЗаменить(Стр,СимволТабуляции,	" "); 			// x09
	Стр = СтрЗаменить(Стр,РазделительСтрок,	" ");			// x0a
	//Стр = СтрЗаменить(Стр,Символы.ПФ,	"\f"),			// x0c
	//Стр = СтрЗаменить(Стр,Символы.ВК,	"\r"),			// x0d
	
	//Стр = СтрЗаменить(Стр,"і","i"); 
	//Стр = СтрЗаменить(Стр,"ї","i");
	//Стр = СтрЗаменить(Стр,"І","I");
	//Стр = СтрЗаменить(Стр,"є","е"); 
	//Стр = СтрЗаменить(Стр,"Є","Е"); 
	//Стр = СтрЗаменить(Стр,",","."); 
	Стр = СтрЗаменить(Стр,"""",""); 
	
	//Стр = ПреобразоватьСтрокуВУТФ8(СокрЛП(Стр));
	//Стр = СтрЗаменить(Стр,","," ");  
	//Стр = СтрЗаменить(Стр,"  "," ");
	//Если ПустаяСтрока(Стр) = 1 Тогда
	//	Стр = Пусто;
	//КонецЕсли;
	
	Return Стр;
EndFunction     

//=============================================
Function ConvertListToJSONObject(valueList)
	
	stringResult = "{";

	For i=1 To valueList.GetListSize() Do 
		            
		key = "";
		value = valueList.GetValue(i, key);
		
		stringResult = stringResult+""""+key+""":"; 
			
		Если Лев(value,1) = "#" Тогда  
			digits = Mid(value, 2, 1);
			value = Mid(value,3);
			stringResult = stringResult+Формат(value,"Ч."+digits+"."); 
		ИначеЕсли ПустоеЗначение(value) = 1 Тогда
			stringResult = stringResult+"null";
		Иначе
			stringResult = stringResult+""""+PrepareString(value)+"""";
		КонецЕсли;                                   
		                          
		Если i<valueList.GetListSize() Тогда
			stringResult = stringResult+",";
		КонецЕсли; 
		
	EndDo;   
	
	stringResult = stringResult+"}";
	
	Return stringResult;
	
EndFunction  

//=============================================
Function ConvertListToJSONArray(key, valueList)
	
	stringResult = "{"""+key+""":["; 
	
	For i=1 To valueList.GetListSize() Do 
		            
		key = "";
		value = valueList.GetValue(i, key);
		
		stringResult = stringResult+ConvertListToJSONObject(value); 
		                          
		Если i<valueList.GetListSize() Тогда
			stringResult = stringResult+",";
		КонецЕсли; 
		
	EndDo;   
	
	stringResult = stringResult+"]}";
	
	Return stringResult;
	
EndFunction

//=============================================
Функция ТипОбъекта(Тип)
	Если Тип = "goods" Тогда
		Возврат "Справочник.ТМЦ";
	ИначеЕсли Тип = "inventory" Тогда
		Возврат "Документ.Инвентаризация"; 
	ИначеЕсли Тип = "ship" Тогда
		Возврат "Документ.РасходнаяНакладная"; 
	ИначеЕсли Тип = "receive" Тогда
		Возврат "Документ.ПриходнаяНакладная"; 
		
	КонецЕсли;
КонецФункции

//=============================================
Функция ИдентификаторЭлемента(Элемент) Экспорт
	Попытка
		Стр = ЗначениеВСтрокуВнутр(Элемент);
	Исключение    
		ЗаписьЖурналаРегистрации("http: "+ОписаниеОшибки());
		Возврат "";
	КонецПопытки; 
	Стр = СтрЗаменить(Стр, "{", ""); 
	Стр = СтрЗаменить(Стр, "}", "");
	Стр = СтрЗаменить(Стр, """", ""); 
	Стр = СтрЗаменить(Стр, ",", "-");
	Стр = СтрЗаменить(Стр, " ", "");
	Возврат Стр;
КонецФункции 

//=============================================
Функция ДатаДокумента(Док) Экспорт
	Возврат Формат(Док.ДатаДок, "ДДДММГГГГ");
КонецФункции 

//=============================================
Функция КонтрагентВДокументе(Док) Экспорт 
	Стр = "";
	Если Док.Вид() = "РасходнаяНакладная" Тогда
		Стр = Док.Покупатель;
	ИначеЕсли Док.Вид() = "ПриходнаяНакладная" Тогда
		Стр = Док.Поставщик;
	ИначеЕсли Док.Вид() = "Инвентаризация" Тогда
		Стр = Док.Сотрудник;
	КонецЕсли;  
	Возврат СокрЛП(Стр);
КонецФункции

//=============================================
Функция СуммаДокумента(Док) Экспорт  
	Сумма = 0;
	Если Док.Вид() = "РасходнаяНакладная" Тогда
		Сумма = Док.Итог("Сумма");
	ИначеЕсли Док.Вид() = "ПриходнаяНакладная" Тогда
		Сумма = Док.Итог("Сумма");
	ИначеЕсли Док.Вид() = "Инвентаризация" Тогда
		Сумма = Док.Итог("СуммаРазн");
	КонецЕсли;  
	Возврат Формат(Сумма, "Ч0.2.");
КонецФункции

//=============================================
Функция saveDocument(ДанныеДокумента) Экспорт 
	Перем Позиция;
	
	Результат = СоздатьОбъект("СписокЗначений");  
	Результат.Установить("saved","no"); 
	Результат.Установить("error","");
	
	Тип = ДанныеДокумента.Получить("type");
	Номер = ДанныеДокумента.Получить("number");
	Идентификатор = ДанныеДокумента.Получить("guid"); 
	ДанныеСтрок = ДанныеДокумента.Получить("lines");
	
	Попытка
		Док = СоздатьОбъект(ТипОбъекта(Тип));
	Исключение      
		ЗаписьЖурналаРегистрации("http: "+ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;    
	
	Если ПустоеЗначение(ДанныеСтрок) = 1 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Тип = "inventory" Тогда
		Номер = Число(Номер); 
	ИначеЕсли Тип = "ship" Тогда
		Номер = "РТ-"+Номер; 
	ИначеЕсли Тип = "receive" Тогда
		Номер = "ПТ-"+Номер; 
	КонецЕсли;                     
	
	Спр = СоздатьОбъект("Справочник.ТМЦ");
	
	Если Док.НайтиПоНомеру(Номер, ТекущаяДата()) = 1 Тогда   
		
		Если Док.Проведен() = 1 Тогда
			Результат.Установить("error","Документ уже проведен");
			Возврат Результат;
		КонецЕсли;
		
		Для Н=1 По ДанныеСтрок.РазмерСписка() Цикл
			
			ДанныеСтроки = ДанныеСтрок.ПолучитьЗначение(Н); 
			КодТовара = ДанныеСтроки.Получить("code");
			Если ПустаяСтрока(КодТовара) = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Спр.НайтиПоКоду(КодТовара, 2) = 1 Тогда   
				
				ВыбранныйТовар = Спр.ТекущийЭлемент();
				фНайден = 0;
				
				Док.ВыбратьСтроки();
				Пока Док.ПолучитьСтроку() = 1 Цикл  
					
					Если Тип = "inventory" Тогда  
						
						Товар 		= Док.ТМЦ; 
						
					Иначе  
						
						Товар 		= Док.Товар; 
						
					КонецЕсли;    
					
					Если Товар <> ВыбранныйТовар Тогда
						Продолжить;
					КонецЕсли;    
					
					фНайден = 1;
					
					Если Тип = "inventory" Тогда  
						
						Док.Факт = ДанныеСтроки.Получить("quantity");
						
					Иначе  
						
						Док.Количество = ДанныеСтроки.Получить("quantity");
						
					КонецЕсли;    
					
				КонецЦикла;   
				
				Если фНайден = 0 Тогда  
					
					Док.НоваяСтрока();
					
					Если Тип = "inventory" Тогда  
						                   
						Док.ТМЦ = ВыбранныйТовар;
						Док.Факт = ДанныеСтроки.Получить("quantity");
						
					Иначе  
						                         
						Док.Товар = ВыбранныйТовар;
						Док.Количество = ДанныеСтроки.Получить("quantity");
						
					КонецЕсли;    
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Попытка
			Док.Записать(); 
			Результат.Установить("saved","ok"); 
		Исключение
			Результат.Установить("error", ОписаниеОшибки());
		КонецПопытки;
		
	Иначе
		
		ЗаписьЖурналаРегистрации("Не найден документ "+Тип+" по номеру "+Номер); 
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 
//=============================================
Функция getDocumentsData(Тип, Период) Экспорт 
	Перем Позиция;
	
	Результат = СоздатьОбъект("СписокЗначений");
	
	Попытка
		Док = СоздатьОбъект(ТипОбъекта(Тип));
	Исключение      
		ЗаписьЖурналаРегистрации("http: "+ОписаниеОшибки());
		Возврат "";
	КонецПопытки;   
	
	ДатаОт = ДобавитьМесяц(ТекущаяДата(), -6);
	
	//Если Период = "all" Тогда  
		Кол = 0;
		Док.ОбратныйПорядок(1);
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл 
			Позиция = Док.ТекущийДокумент();
			Кол = Кол+1;
			Если Кол = 100 Тогда
				ДатаОт = Док.ДатаДок;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	//КонецЕсли;
	          
	Док.ОбратныйПорядок(1);
	Док.ВыбратьДокументы(ДатаОт,); 
	
	Пока Док.ПолучитьДокумент() = 1 Цикл  
		
		Номер = Сред(Док.НомерДок, Найти(Док.НомерДок, "-")+1);
		
		Элемент = СоздатьОбъект("СписокЗначений");
		Элемент.Установить("guid", ИдентификаторЭлемента(Док.ТекущийДокумент())); 
		Элемент.Установить("isProcessed", Док.Проведен());
		Элемент.Установить("isDeleted", Док.ПометкаУдаления()); 
		Элемент.Установить("number", Номер);  
		Элемент.Установить("date", ДатаДокумента(Док)); 
		Элемент.Установить("contractor", КонтрагентВДокументе(Док)); 
		Элемент.Установить("company", Строка(Док.Фирма)); 
		Элемент.Установить("warehouse", Строка(Док.Склад)); 
		Элемент.Установить("sum", СуммаДокумента(Док)); 
		
		Результат.ДобавитьЗначение(Элемент);
		Элемент = "";   
		
		Если Док.ТекущийДокумент() = Позиция Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции   

//=============================================
Функция getDocumentContent(Тип, Номер, Идентификатор) Экспорт 
	
	Результат = СоздатьОбъект("СписокЗначений");
	
	Попытка
		Док = СоздатьОбъект(ТипОбъекта(Тип));
	Исключение      
		ЗаписьЖурналаРегистрации("http: "+ОписаниеОшибки());
		Возврат "";
	КонецПопытки;   
	
	Если Тип = "inventory" Тогда
		Номер = Число(Номер); 
	ИначеЕсли Тип = "ship" Тогда
		Номер = "РТ-"+Номер; 
	ИначеЕсли Тип = "receive" Тогда
		Номер = "ПТ-"+Номер; 
	КонецЕсли;
	
	Если Док.НайтиПоНомеру(Номер, ТекущаяДата()) = 1 Тогда   
		
		Если Док.КоличествоСтрок() > 300 Тогда
			Элемент = СоздатьОбъект("СписокЗначений");
			Элемент.Установить("line", 			""); 
			Элемент.Установить("code", 			"");
			Элемент.Установить("art", 			""); 
			Элемент.Установить("description", 	"ВНИМАНИЕ: показаны первые 300 строк, всего строк в документе: "+Док.КоличествоСтрок());  
			Элемент.Установить("notes", 		""); //всего строк в документе: "+Док.КоличествоСтрок()); 
			Элемент.Установить("unit", 			"");
			Элемент.Установить("quantity", 		""); 
			Элемент.Установить("rest", 			""); 
			Элемент.Установить("price", 		""); 
			Элемент.Установить("sum", 			"");
			
			Результат.ДобавитьЗначение(Элемент);
			Элемент = "";  
		КонецЕсли;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл  
			
			Если Тип = "inventory" Тогда  
				
				Товар 		= Док.ТМЦ; 
				Количество 	= Док.Факт; 
				Остаток		= Док.ОстБух;
				Цена 		= Док.ТМЦ.ОтпЦена.Получить(Док.ДатаДок);
				Сумма 		= Цена * Док.Разница;
				
			Иначе  
				
				Товар 		= Док.Товар; 
				Количество 	= Формат(Док.Количество, "Ч.3"); 
				Остаток		= "";
				Цена 		= Док.Цена;
				Сумма 		= Док.Сумма;
				
			КонецЕсли;      
			
			Если ПустаяСтрока(Товар.Наименование) = 1 Тогда
				Продолжить;
			КонецЕсли;  
			
			Элемент = СоздатьОбъект("СписокЗначений");
			Элемент.Установить("line", 			"#0"+Док.НомерСтроки); 
			Элемент.Установить("code", 			Товар.ПолныйКод());
			Элемент.Установить("art", 			Товар.ПолныйКод()); 
			Элемент.Установить("description", 	Товар.Наименование);  
			Элемент.Установить("notes", 		""); 
			Элемент.Установить("unit", 			Товар.ЕдИзм);
			Элемент.Установить("quantity", 		"#3"+Количество); 
			Элемент.Установить("rest", 			"#3"+Остаток); 
			Элемент.Установить("price", 		"#2"+Формат(Цена, "Ч.2")); 
			Элемент.Установить("sum", 			"#2"+Формат(Сумма, "Ч.2"));
			
			Результат.Установить("line"+Док.НомерСтроки, Элемент);
			Элемент = "";  
			
			Если Результат.РазмерСписка() = 301 Тогда  
				Прервать;
			КонецЕсли;
			
		КонецЦикла;   
		
	Иначе
		
		ЗаписьЖурналаРегистрации("Не найден документ "+Тип+" по номеру "+Номер);
		
	КонецЕсли;        
	
	Текст = СоздатьОбъект("Текст"); 
	Текст.ДобавитьСтроку(ConvertListToJSONArray("result", Результат));
	Текст.Записать("d:\ftp_root\json.txt"); 
	
	Возврат ConvertListToJSONArray("result", Результат);
	
КонецФункции   

//=============================================
Функция ДанныеТовара(Товар)
	
	Элемент = СоздатьОбъект("СписокЗначений");
	Элемент.Установить("id", Товар.ПолныйКод()); 
	Элемент.Установить("isGroup", Товар.ЭтоГруппа());
	Элемент.Установить("code", Товар.ПолныйКод());     
	Элемент.Установить("art", Товар.ПолныйКод());
	Элемент.Установить("description", Товар.Наименование); 
	Если Товар.ЭтоГруппа() = 1 Тогда
		Элемент.Установить("unit", "");
	Иначе
		Элемент.Установить("unit", Товар.ЕдИзм);
	КонецЕсли;
	Если ПустоеЗначение(Товар.Родитель) = 1 Тогда
		Элемент.Установить("groupName", ""); 
		Элемент.Установить("groupCode", "");
	Иначе
		Элемент.Установить("groupName", Товар.Родитель.Наименование); 
		Элемент.Установить("groupCode", Товар.Родитель.ПолныйКод());
	КонецЕсли; 
	
	Возврат Элемент;
	
КонецФункции

//=============================================
Функция getReferenceData(Тип, КодГруппы) 
	
	Результат = СоздатьОбъект("СписокЗначений");
	
	ТипОбъекта = ТипОбъекта(Тип);
	
	Попытка
		Спр = СоздатьОбъект(ТипОбъекта); 
		Спр2 = СоздатьОбъект(ТипОбъекта);
	Исключение   
		ЗаписьЖурналаРегистрации("http: "+ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки; 
	
	ТекущаяГруппа = ПолучитьПустоеЗначение(ТипОбъекта);
	
	Если КодГруппы <> "noGroup" Тогда
		Если Спр2.НайтиПоКоду(КодГруппы, 2) = 1 Тогда 
			ТекущаяГруппа = Спр2.ТекущийЭлемент(); 
		КонецЕсли;
	КонецЕсли; 
	
	Если Спр.ВыбратьЭлементыПоРеквизиту("ОтборПоРодителю", ТекущаяГруппа, 0) = 1 Тогда
		Пока Спр.ПолучитьЭлемент() = 1 Цикл  
			
			Если ПустаяСтрока(Спр.Наименование) = 1 Тогда
				Продолжить;
			КонецЕсли;     
			Если Спр.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;   
			
			Результат.ДобавитьЗначение(ДанныеТовара(Спр.ТекущийЭлемент()));
			
		КонецЦикла;
	Иначе
		//ЗаписьЖурналаРегистрации("По группе "+ТекущаяГруппа+" ничего не выбрано");
	КонецЕсли;     
	          
	Возврат Результат;
	              
КонецФункции     

//=============================================
Функция getCatalogDataWithFilter(Тип, СтрокаПоиска) 
	
	Результат = СоздатьОбъект("СписокЗначений");
	
	ТипОбъекта = ТипОбъекта(Тип);
	
	Попытка
		Спр = СоздатьОбъект(ТипОбъекта); 
	Исключение   
		ЗаписьЖурналаРегистрации("http: "+ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;     
	
	//search by description takes too mach time !!!
	//
	//Если Спр.НайтиПоНаименованию(СтрокаПоиска, 0, 0) = 1 Тогда 
	//	Результат.ДобавитьЗначение(ДанныеТовара(Спр.ТекущийЭлемент()));
	//КонецЕсли;   
	
	Если Спр.НайтиПоКоду(СтрЗаменить(СтрокаПоиска,"-","/"), 2) = 1 Тогда 
		Результат.ДобавитьЗначение(ДанныеТовара(Спр.ТекущийЭлемент()));
	КонецЕсли;   
		
	Возврат Результат;
	              
КонецФункции     

//=============================================
Функция findBarcode(Штрихкод)  
	Перем Товар, ВесИзШК; 
	
	Результат = СоздатьОбъект("СписокЗначений");
	
	Если глПолучитьТоварПоШтрихкоду(Товар,Штрихкод,ВесИзШК) <> 0 Тогда  
		
		Результат.ДобавитьЗначение(ДанныеТовара(Товар));
		
	КонецЕсли;
	
	Возврат Результат;
	              
КонецФункции     

//=============================================
Функция getOptionsData(Идентификатор) 
	
	Результат = СоздатьОбъект("СписокЗначений");
	
	Элемент = СоздатьОбъект("СписокЗначений");
	Элемент.Установить("read", "true"); 
	Элемент.Установить("write", "true");
	Элемент.Установить("user", ""); 
	Элемент.Установить("catalog", "goods"); 
	Элемент.Установить("document", "inventory");
	
	Результат.ДобавитьЗначение(Элемент);
	Элемент = "";
			
	Возврат Результат;
	              
КонецФункции     

//=============================================
Процедура Выход()
	Форма.Параметр = Параметры;
	Форма.Закрыть();
КонецПроцедуры
     
//=============================================
Процедура ПриОткрытии()   
	
	Результат = СоздатьОбъект("СписокЗначений");
	Параметры = Форма.Параметр;      
	
	Если ПустоеЗначение(Параметры) = 1 Тогда
		
		Параметры = СоздатьОбъект("СписокЗначений");  
		
		ЗаписьЖурналаРегистрации("Сервис: пустой параметр");

	Иначе
		
		Команда = Параметры.Получить("Команда"); 
		Пар1 = Параметры.Получить("Пар1"); 
		Пар2 = Параметры.Получить("Пар2");
		Пар3 = Параметры.Получить("Пар3");
		
		//ЗаписьЖурналаРегистрации("Сервис команда: "+Команда+" П1:"+Пар1+" П2:"+Пар2+" П3:"+Пар3);  
		
		Попытка
			
			Если Команда = "getReferenceData" Тогда
				
				Результат = getReferenceData(Пар1, Пар2);  
				
			ИначеЕсли Команда = "getDocumentsData" Тогда
				
				Результат = getDocumentsData(Пар1, Пар2);  
				
			ИначеЕсли Команда = "getDocumentContent" Тогда
				
				Результат = getDocumentContent(Пар1, Пар2, Пар3);  
				
			ИначеЕсли Команда = "readOptions" Тогда
				
				Результат = getOptionsData(Пар1);  
				
			ИначеЕсли Команда = "findBarcode" Тогда
				
				Результат = findBarcode(Пар1);  
				
			ИначеЕсли Команда = "getCatalogDataWithFilter" Тогда
				
				Результат = getCatalogDataWithFilter(Пар1, Пар2);  
				
			ИначеЕсли Команда = "saveDocument" Тогда
				
				Результат = saveDocument(Пар1);  
				
			Иначе
				
				ЗаписьЖурналаРегистрации("Сервис: неизвестная команда. "+Команда);
				
			КонецЕсли;  
			
		Исключение
			ЗаписьЖурналаРегистрации("Сервис: ошибка: "+ОписаниеОшибки());
		КонецПопытки;
		
		//
		
		Параметры.Установить("Результат", Результат);  
		
	КонецЕсли;  
	
	Выход(); 
	
КонецПроцедуры  